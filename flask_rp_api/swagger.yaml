openapi: 3.0.0
info:
  title: "Notes Flask API"
  description: "An API description of Users and their Notes"
  version: "1.0.1"

servers:
  - url: "/api"

components:
  schemas:
    User:
      type: object
      required:
        - lname
      properties:
        fname:
          type: "string"
        lname:
          type: "string"
  parameters:
    lname:
      name: "lname"
      description: "Last name of the person to get"
      in: path
      required: True
      schema:
        type: "string"
    note_id:
      name: "note_id"
      description: "ID of the note"
      in: path
      required: True
      schema:
        type: "integer"
paths:
  /users:
    get:
      operationId: "users.read_all"
      tags:
        - Users
      summary: "Read the list of users"
      responses:
        "200":
          description: "Successfully read users list"
    post:
      operationId: "users.create"
      tags:
        - Users
      summary: "Create new User"
      requestBody:
        description: "User to Create"
        required: True
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: "Successfully created a new user"
  /users/{lname}:
    get:
      operationId: "users.read_one"
      tags:
        - Users
      summary: "Read one User"
      parameters:
        - $ref: "#/components/parameters/lname"
      responses:
        "200":
          description: "User successfully fetched"
    put:
      tags:
        - Users
      operationId: "users.update"
      summary: "Update a user"
      parameters:
        - $ref: "#/components/parameters/lname"
      responses:
        "200":
          description: "User successfully updated"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
    delete:
      tags:
        - Users
      operationId: "users.delete"
      summary: "Delete a user"
      parameters:
        - $ref: "#/components/parameters/lname"
      responses:
        "204":
          description: "User successfully deleted"
  /notes:
    get:
      operationId: "notes.read"
      tags:
        - Notes
      summary: "Read all notes"
      responses:
        "200":
          description: "Successfully read notes list"
    post:
      operationId: "notes.create"
      tags:
        - Notes
      summary: "Create a note associated with a person"
      requestBody:
        description: "Note to create"
        required: True
        content:
          application/json:
            schema:
              type: "object"
              properties:
                user_id:
                  type: "integer"
                content:
                  type: "string"
      responses:
        "201":
          description: "Successfully created a note"
  /notes/{note_id}:
    get:
      operationId: "notes.read_one"
      tags:
        - Notes
      summary: "Read one note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "200":
          description: "Successfully read one note"
    put:
      tags:
        - Notes
      operationId: "notes.update"
      summary: "Update a note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "200":
          description: "Note successfully updated"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: "string"
    delete:
      tags:
        - Notes
      operationId: "notes.delete"
      summary: "Delete a Note"
      parameters:
        - $ref: "#/components/parameters/note_id"
      responses:
        "204":
          description: "Note successfully deleted"
